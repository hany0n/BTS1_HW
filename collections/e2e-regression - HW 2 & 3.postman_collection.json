{
	"info": {
		"_postman_id": "16c22354-0a49-43ac-852f-55472f18eb2d",
		"name": "e2e-regression | HW 2 & 3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12219227"
	},
	"item": [
		{
			"name": "Positive-critical-path",
			"item": [
				{
					"name": "AddActivities",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"const oldId = parseInt(pm.collectionVariables.get(\"id\"))",
									"let id = 1;",
									"if (oldId) {",
									"    id = (oldId + 1).toString()",
									"} ",
									"const titleLength = pm.collectionVariables.get(\"titleLength\")",
									"const contentLength = Math.pow(2, 10);",
									"const timeRange = 12 * 60;",
									"",
									"const title = Util.getRandomString(Util.getRandomInt(titleLength));",
									"const content = Util.getRandomString(Util.getRandomInt(contentLength));",
									"const time = Util.getRandomInt(timeRange);",
									"",
									"pm.collectionVariables.set(\"id\", id);",
									"pm.collectionVariables.set(\"title\", title);",
									"pm.collectionVariables.set(\"content\", content);",
									"pm.collectionVariables.set(\"time\", time);",
									"",
									"/*unction getRandomString(lenght) {",
									"    let chars = \"abcdeghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ012345689!@#$%^&*()';\";",
									"    let charsLength = chars.length;",
									"    let result = '';",
									"    for (let i = 0; i < lenght; i++) {",
									"        result += chars.charAt(Math.floor(Math.random() * charsLength));",
									"    }",
									"    return result;",
									"}",
									"",
									"function getRandomInt(max) {",
									"    return Math.floor(Math.random() * max);",
									"}*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"})",
									"const reponseText = pm.response.text();",
									"",
									"pm.test(\"The response has Activity ID\", () => {",
									"    const id = pm.collectionVariables.get('id')",
									"    pm.expect(reponseText).includes(`Activity { id: ActivityId(\"${id}\")`)",
									"})",
									"pm.test(\"The response has title\", () => {",
									"    pm.expect(reponseText).includes(pm.collectionVariables.get(\"title\"))",
									"})",
									"pm.test(\"The response has content\", () => {",
									"    pm.expect(reponseText).includes(pm.collectionVariables.get(\"content\"))",
									"})",
									"pm.test(\"The response has time\", () => {",
									"    pm.expect(reponseText).includes(pm.collectionVariables.get(\"time\"))",
									"})",
									"",
									"pm.test(\"Reponse time is less than 200ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"{{id}}\",\n    \"title\": \"{{title}}\",\n    \"content\": \"{{content}}\",\n    \"time\": {{time}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/activities",
							"host": [
								"{{url}}"
							],
							"path": [
								"activities"
							]
						}
					},
					"response": []
				},
				{
					"name": "CheckActivitiesAdded",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const startPagination = parseInt(pm.collectionVariables.get(\"id\")) - 1;",
									"pm.collectionVariables.set(\"startPagination\", startPagination);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"})",
									"",
									"const responseJson = pm.response.json()[0]",
									"",
									"pm.test(\"The array key lenght should be equal 4\", () => {",
									"    pm.expect(Object.keys(responseJson).length).to.be.eql(4);",
									"})",
									"",
									"pm.test(\"The response has id\", () => {",
									"    pm.expect(responseJson.id).to.be.eql(pm.collectionVariables.get(\"id\").toString())",
									"})",
									"pm.test(\"The response has title\", () => {",
									"    pm.expect(responseJson.title).to.be.eql(pm.collectionVariables.get(\"title\"))",
									"})",
									"pm.test(\"The response has content\", () => {",
									"    pm.expect(responseJson.content).to.be.eql(pm.collectionVariables.get(\"content\"))",
									"})",
									"pm.test(\"The response has time\", () => {",
									"    pm.expect(responseJson.time).to.be.eql(pm.collectionVariables.get(\"time\"))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/activities?start={{startPagination}}&end={{id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"activities"
							],
							"query": [
								{
									"key": "start",
									"value": "{{startPagination}}"
								},
								{
									"key": "end",
									"value": "{{id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateActivities",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const titleLength = pm.collectionVariables.get(\"titleLength\")",
									"const contentLength = Math.pow(2, 12)",
									"const timeRange = 12 * 60;",
									"",
									"const title = Util.getRandomString(Util.getRandomInt(titleLength))",
									"const content = Util.getRandomString(Util.getRandomInt(contentLength))",
									"const time = Util.getRandomInt(timeRange);",
									"",
									"pm.collectionVariables.set(\"title\", title);",
									"pm.collectionVariables.set(\"content\", content);",
									"pm.collectionVariables.set(\"time\", time);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"})",
									"const reponseText = pm.response.text();",
									"",
									"pm.test(\"The response has Activity Id\", () => {",
									"    pm.expect(reponseText.includes(`Activity { id: ActivityId(\"${pm.collectionVariables.get('id')}\")`)).to.be.true",
									"})",
									"",
									"pm.test(\"The response has title\", () => {",
									"    pm.expect(reponseText.includes(pm.collectionVariables.get(\"title\"))).to.be.true",
									"})",
									"",
									"pm.test(\"The response has content\", () => {",
									"    pm.expect(reponseText.includes(pm.collectionVariables.get(\"content\"))).to.be.true",
									"})",
									"",
									"pm.test(\"The response has time\", () => {",
									"    pm.expect(reponseText.includes(pm.collectionVariables.get(\"time\"))).to.be.true",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"{{id}}\",\n    \"title\": \"{{title}}\",\n    \"content\": \"{{content}}\",\n    \"time\": {{time}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/activities/{{id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"activities",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TestActivitiesUpdated",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const startPagination = parseInt(pm.collectionVariables.get(\"id\")) - 1;",
									"pm.collectionVariables.set(\"startPagination\", startPagination);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"})",
									"",
									"const responseJson = pm.response.json()[0]",
									"",
									"pm.test(\"The key lenght should be equal 4\", () => {",
									"    pm.expect(Object.keys(responseJson).length).to.be.eql(4);",
									"})",
									"",
									"pm.test(\"The response has Activity ID\", () => {",
									"    pm.expect(responseJson.id).to.be.eql(pm.collectionVariables.get(\"id\").toString())",
									"})",
									"pm.test(\"The response has title\", () => {",
									"    pm.expect(responseJson.title).to.be.eql(pm.collectionVariables.get(\"title\"))",
									"})",
									"pm.test(\"The response has content\", () => {",
									"    pm.expect(responseJson.content).to.be.eql(pm.collectionVariables.get(\"content\"))",
									"})",
									"",
									"pm.test(\"The response has time\", () => {",
									"    pm.expect(responseJson.time).to.be.eql(pm.collectionVariables.get(\"time\"))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/activities?start={{startPagination}}&end={{id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"activities"
							],
							"query": [
								{
									"key": "start",
									"value": "{{startPagination}}"
								},
								{
									"key": "end",
									"value": "{{id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TimeOff",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"const timeSpent = Util.getRandomInt(pm.collectionVariables.get(\"time\"))",
									"pm.collectionVariables.set(\"timeSpent\", timeSpent)",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"})",
									"",
									"const timeSpentId = Util.getIntFromText(pm.response.text());",
									"",
									"pm.collectionVariables.set(\"timeSpentID\", timeSpentId)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"time\": {{timeSpent}},\n    \"activity_id\": \"{{id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/time_spent",
							"host": [
								"{{url}}"
							],
							"path": [
								"time_spent"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetTimeOff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const reponseText = pm.response.text();",
									"",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"})",
									"",
									"pm.test(\"The response has right timespent id\", () => {",
									"   const timeSpentId = pm.collectionVariables.get('timeSpentID')",
									"   pm.expect(reponseText).includes(`TimeSpent { id: TimeSpentId(\"${timeSpentId}\")`)",
									"})",
									"pm.test(\"The response has right timespent \", () => {",
									"    pm.expect(reponseText).includes(pm.collectionVariables.get(\"timeSpent\"))",
									"})",
									"pm.test(\"The response has right activity_id\", () => {",
									"    const activityId = pm.collectionVariables.get('id')",
									"    pm.expect(reponseText).includes(`ActivityId(\"${activityId}\")`)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/time_spent/{{timeSpentID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"time_spent",
								"{{timeSpentID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update_activity_2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const titleLength = pm.collectionVariables.get(\"titleLength\")",
									"const contentLength = Math.pow(2, 12)",
									"const timeRange = 12 * 60;",
									"",
									"const title = Util.getRandomString(Util.getRandomInt(titleLength))",
									"const content = Util.getRandomString(Util.getRandomInt(contentLength))",
									"const time = Util.getRandomInt(timeRange);",
									"",
									"pm.collectionVariables.set(\"title\", title);",
									"pm.collectionVariables.set(\"content\", content);",
									"pm.collectionVariables.set(\"time\", time);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"})",
									"const reponseText = pm.response.text();",
									"",
									"pm.test(\"The response has Activity Id\", () => {",
									"    pm.expect(reponseText.includes(`Activity { id: ActivityId(\"${pm.collectionVariables.get('id')}\")`)).to.be.true",
									"})",
									"",
									"pm.test(\"The response has title\", () => {",
									"    pm.expect(reponseText.includes(pm.collectionVariables.get(\"title\"))).to.be.true",
									"})",
									"",
									"pm.test(\"The response has content\", () => {",
									"    pm.expect(reponseText.includes(pm.collectionVariables.get(\"content\"))).to.be.true",
									"})",
									"",
									"pm.test(\"The response has time\", () => {",
									"    pm.expect(reponseText.includes(pm.collectionVariables.get(\"time\"))).to.be.true",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"{{id}}\",\n    \"title\": \"{{title}}\",\n    \"content\": \"{{content}}\",\n    \"time\": {{time}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/activities/{{id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"activities",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check_time_spent_exist_after_update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const reponseText = pm.response.text();",
									"",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"})",
									"",
									"pm.test(\"The response has right timespent id\", () => {",
									"   const timeSpentId = pm.collectionVariables.get('timeSpentID')",
									"   pm.expect(reponseText).includes(`TimeSpent { id: TimeSpentId(\"${timeSpentId}\")`)",
									"})",
									"pm.test(\"The response has right timespent \", () => {",
									"    pm.expect(reponseText).includes(pm.collectionVariables.get(\"timeSpent\"))",
									"})",
									"pm.test(\"The response has right activity_id\", () => {",
									"    const activityId = pm.collectionVariables.get('id')",
									"    pm.expect(reponseText).includes(`ActivityId(\"${activityId}\")`)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/time_spent/{{timeSpentID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"time_spent",
								"{{timeSpentID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "add_time_spent_more_than_exist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const time = pm.collectionVariables.get(\"time\")",
									"const timeSpent = Util.getRandomInt(time) + time",
									"",
									"pm.collectionVariables.set(\"timeSpent\", timeSpent)",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"})",
									"",
									"const oldTimeSpent = pm.collectionVariables.get(\"timeSpentID\");",
									"const timeSpentId = Util.getIntFromText(pm.response.text());",
									"",
									"pm.test(\"Old time spent should be more than old\", () =>{",
									"    pm.expect(oldTimeSpent !== timeSpentId).to.be.true;",
									"})",
									"",
									"pm.collectionVariables.set(\"timeSpentID\", timeSpentId)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"time\": {{timeSpent}},\n    \"activity_id\": \"{{id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/time_spent",
							"host": [
								"{{url}}"
							],
							"path": [
								"time_spent"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete_activity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"})",
									"",
									"pm.test(\"Text should contain true information\", () => {",
									"    pm.expect(pm.response.text()).include(\"Activity deleted\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/activities/{{id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"activities",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check_time_spent_exist_after_delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const reponseText = pm.response.text();",
									"",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"})",
									"",
									"pm.test(\"The response has right timespent id\", () => {",
									"   const timeSpentId = pm.collectionVariables.get('timeSpentID')",
									"   pm.expect(reponseText).includes(`TimeSpent { id: TimeSpentId(\"${timeSpentId}\")`)",
									"})",
									"pm.test(\"The response has right timespent \", () => {",
									"    pm.expect(reponseText).includes(pm.collectionVariables.get(\"timeSpent\"))",
									"})",
									"pm.test(\"The response has right activity_id\", () => {",
									"    const activityId = pm.collectionVariables.get('id')",
									"    pm.expect(reponseText).includes(`ActivityId(\"${activityId}\")`)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/time_spent/{{timeSpentID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"time_spent",
								"{{timeSpentID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "add_time_spent_when_activity_not_exist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const timeSpent = Util.getRandomInt(pm.collectionVariables.get(\"time\"))",
									"pm.collectionVariables.set(\"timeSpent\", timeSpent)",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", () => {",
									"    pm.expect(pm.response.code).to.eql(404);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"time\": {{timeSpent}},\n    \"activity_id\": \"{{id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/time_spent",
							"host": [
								"{{url}}"
							],
							"path": [
								"time_spent"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"Util = {}",
							"",
							"Util.getRandomString = (lenght) => {",
							"    let chars = \"abcdeghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ012345689!@#$%^&*()';\";",
							"    let result = '';",
							"    for (let i = 0; i < lenght; i++) {",
							"        result += chars.charAt(Util.getRandomInt(chars.length));",
							"    }",
							"    return result;",
							"}",
							"",
							"Util.getRandomInt = (max) => Math.floor(Math.random()* max)",
							"",
							"Util.getIntFromText = (string) => {",
							"    const regex = /\\d+/;",
							"    const match = string.match(regex);",
							"    return match[0]",
							"}",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "NegativeCases",
			"item": [
				{
					"name": "Add",
					"item": [
						{
							"name": "miss_one_field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"const oldId = parseInt(pm.collectionVariables.get(\"id\"))",
											"let id = 1;",
											"if (oldId) {",
											"    id = (oldId + 1).toString()",
											"} ",
											"",
											"const title = Util.getRandomString(Util.getRandomInt(60));",
											"const content = Util.getRandomString(Util.getRandomInt(Math.pow(2, 10)));",
											"const timeRange = 12 * 60;",
											"const time = Util.getRandomInt(timeRange);",
											"",
											"pm.collectionVariables.set(\"id\", id);",
											"pm.collectionVariables.set(\"title\", title);",
											"pm.collectionVariables.set(\"content\", content);",
											"pm.collectionVariables.set(\"time\", time);",
											"",
											"/*unction getRandomString(lenght) {",
											"    let chars = \"abcdeghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ012345689!@#$%^&*()';\";",
											"    let charsLength = chars.length;",
											"    let result = '';",
											"    for (let i = 0; i < lenght; i++) {",
											"        result += chars.charAt(Math.floor(Math.random() * charsLength));",
											"    }",
											"    return result;",
											"}",
											"",
											"function getRandomInt(max) {",
											"    return Math.floor(Math.random() * max);",
											"}*/"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", () => {",
											"    pm.expect(pm.response.code).to.eql(422);",
											"})",
											"",
											"",
											"pm.test(\"Response text should exist information about field which missed\", () => {",
											"    const responseText = pm.response.text();",
											"    pm.expect(responseText).includes(\"missing field `id`\")",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    //\"id\": \"{{id}}\",\n    \"title\": \"{{title}}\",\n    \"content\": \"{{content}}\",\n    \"time\": {{time}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/activities",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities"
									]
								}
							},
							"response": []
						},
						{
							"name": "miss_several_fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"const oldId = parseInt(pm.collectionVariables.get(\"id\"))",
											"let id = 1;",
											"if (oldId) {",
											"    id = (oldId + 1).toString()",
											"} ",
											"",
											"const title = Util.getRandomString(Util.getRandomInt(60));",
											"const content = Util.getRandomString(Util.getRandomInt(Math.pow(2, 10)));",
											"const timeRange = 12 * 60;",
											"const time = Util.getRandomInt(timeRange);",
											"",
											"pm.collectionVariables.set(\"id\", id);",
											"pm.collectionVariables.set(\"title\", title);",
											"pm.collectionVariables.set(\"content\", content);",
											"pm.collectionVariables.set(\"time\", time);",
											"",
											"/*unction getRandomString(lenght) {",
											"    let chars = \"abcdeghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ012345689!@#$%^&*()';\";",
											"    let charsLength = chars.length;",
											"    let result = '';",
											"    for (let i = 0; i < lenght; i++) {",
											"        result += chars.charAt(Math.floor(Math.random() * charsLength));",
											"    }",
											"    return result;",
											"}",
											"",
											"function getRandomInt(max) {",
											"    return Math.floor(Math.random() * max);",
											"}*/"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", () => {",
											"    pm.expect(pm.response.code).to.eql(422);",
											"})",
											"",
											"",
											"pm.test(\"Response text should exist information about missed Id\", () => {",
											"    const responseText = pm.response.text();",
											"    pm.expect(responseText).includes(\"missing field `id`\")",
											"})",
											"",
											"pm.test(\"Response text should exist information about missed Time\", () => {",
											"    const responseText = pm.response.text();",
											"    pm.expect(responseText).includes(\"missing field `time`\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    //\"id\": \"{{id}}\",\n    \"title\": \"{{title}}\",\n    \"content\": \"{{content}}\"\n    //\"time\": {{time}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/activities",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities"
									]
								}
							},
							"response": []
						},
						{
							"name": "wrong_data_type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"const oldId = parseInt(pm.collectionVariables.get(\"id\"))",
											"let id = 1;",
											"if (oldId) {",
											"    id = (oldId + 1).toString()",
											"} ",
											"",
											"const title = Util.getRandomString(Util.getRandomInt(60));",
											"const content = Util.getRandomString(Util.getRandomInt(Math.pow(2, 10)));",
											"const timeRange = 12 * 60;",
											"const time = Util.getRandomInt(timeRange);",
											"",
											"pm.collectionVariables.set(\"id\", id);",
											"pm.collectionVariables.set(\"title\", title);",
											"pm.collectionVariables.set(\"content\", content);",
											"pm.collectionVariables.set(\"time\", time);",
											"",
											"/*unction getRandomString(lenght) {",
											"    let chars = \"abcdeghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ012345689!@#$%^&*()';\";",
											"    let charsLength = chars.length;",
											"    let result = '';",
											"    for (let i = 0; i < lenght; i++) {",
											"        result += chars.charAt(Math.floor(Math.random() * charsLength));",
											"    }",
											"    return result;",
											"}",
											"",
											"function getRandomInt(max) {",
											"    return Math.floor(Math.random() * max);",
											"}*/"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", () => {",
											"    pm.expect(pm.response.code).to.eql(422);",
											"})",
											"",
											"",
											"pm.test(\"Response text should exist information about invalid type\", () => {",
											"    const responseText = pm.response.text();",
											"    pm.expect(responseText).includes(\"invalid type: string\")",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{id}}\",\n    \"title\": \"{{title}}\",\n    \"content\": \"{{content}}\",\n    \"time\": \"{{time}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/activities",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities"
									]
								}
							},
							"response": []
						},
						{
							"name": "body_type_text",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"const oldId = parseInt(pm.collectionVariables.get(\"id\"))",
											"let id = 1;",
											"if (oldId) {",
											"    id = (oldId + 1).toString()",
											"} ",
											"",
											"const title = Util.getRandomString(Util.getRandomInt(60));",
											"const content = Util.getRandomString(Util.getRandomInt(Math.pow(2, 10)));",
											"const timeRange = 12 * 60;",
											"const time = Util.getRandomInt(timeRange);",
											"",
											"pm.collectionVariables.set(\"id\", id);",
											"pm.collectionVariables.set(\"title\", title);",
											"pm.collectionVariables.set(\"content\", content);",
											"pm.collectionVariables.set(\"time\", time);",
											"",
											"/*unction getRandomString(lenght) {",
											"    let chars = \"abcdeghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ012345689!@#$%^&*()';\";",
											"    let charsLength = chars.length;",
											"    let result = '';",
											"    for (let i = 0; i < lenght; i++) {",
											"        result += chars.charAt(Math.floor(Math.random() * charsLength));",
											"    }",
											"    return result;",
											"}",
											"",
											"function getRandomInt(max) {",
											"    return Math.floor(Math.random() * max);",
											"}*/"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", () => {",
											"    pm.expect(pm.response.code).to.eql(422);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{id}}\",\n    \"title\": \"{{title}}\",\n    \"content\": \"{{content}}\",\n    \"time\": \"{{time}}\"\n}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{url}}/activities",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities"
									]
								}
							},
							"response": []
						},
						{
							"name": "miss_body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"const oldId = parseInt(pm.collectionVariables.get(\"id\"))",
											"let id = 1;",
											"if (oldId) {",
											"    id = (oldId + 1).toString()",
											"} ",
											"",
											"const title = Util.getRandomString(Util.getRandomInt(60));",
											"const content = Util.getRandomString(Util.getRandomInt(Math.pow(2, 10)));",
											"const timeRange = 12 * 60;",
											"const time = Util.getRandomInt(timeRange);",
											"",
											"pm.collectionVariables.set(\"id\", id);",
											"pm.collectionVariables.set(\"title\", title);",
											"pm.collectionVariables.set(\"content\", content);",
											"pm.collectionVariables.set(\"time\", time);",
											"",
											"/*unction getRandomString(lenght) {",
											"    let chars = \"abcdeghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ012345689!@#$%^&*()';\";",
											"    let charsLength = chars.length;",
											"    let result = '';",
											"    for (let i = 0; i < lenght; i++) {",
											"        result += chars.charAt(Math.floor(Math.random() * charsLength));",
											"    }",
											"    return result;",
											"}",
											"",
											"function getRandomInt(max) {",
											"    return Math.floor(Math.random() * max);",
											"}*/"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", () => {",
											"    pm.expect(pm.response.code).to.eql(422);",
											"})",
											"",
											"pm.test(\"Response text should exist information about missed body\", () => {",
											"    const responseText = pm.response.text();",
											"    pm.expect(responseText).includes(\"EOF while parsing a value\")",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/activities",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edit",
					"item": [
						{
							"name": "update_activity_with_empty_value",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let title = pm.collectionVariables.get(\"title\");",
											"let content = pm.collectionVariables.get(\"content\");",
											"let time = pm.collectionVariables.get(\"time\");",
											"",
											"title = Util.getRandomString(Util.getRandomInt(60))",
											"content = Util.getRandomString(Util.getRandomInt(Math.pow(2, 12)))",
											"const timeRange = 12 * 60;",
											"time = Util.getRandomInt(timeRange);",
											"",
											"pm.collectionVariables.set(\"title\", title);",
											"pm.collectionVariables.set(\"content\", content);",
											"pm.collectionVariables.set(\"time\", time);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", () => {",
											"    pm.expect(pm.response.code).to.eql(422);",
											"})",
											"const reponseText = pm.response.text();",
											"",
											"pm.test(\"The response has text about missing time\", () => {",
											"pm.expect(reponseText).include(\"missing field `time`\")",
											"})",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{id}}\",\n    \"title\": \"{{title}}\",\n    \"content\": \"{{content}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/activities/{{id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update_activity_with_incorect_data_type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let title = pm.collectionVariables.get(\"title\");",
											"let content = pm.collectionVariables.get(\"content\");",
											"let time = pm.collectionVariables.get(\"time\");",
											"",
											"title = Util.getRandomString(Util.getRandomInt(60))",
											"content = Util.getRandomString(Util.getRandomInt(Math.pow(2, 12)))",
											"const timeRange = 12 * 60;",
											"time = Util.getRandomInt(timeRange);",
											"",
											"pm.collectionVariables.set(\"title\", title);",
											"pm.collectionVariables.set(\"content\", content);",
											"pm.collectionVariables.set(\"time\", time);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", () => {",
											"    pm.expect(pm.response.code).to.eql(422);",
											"})",
											"const reponseText = pm.response.text();",
											"",
											"pm.test(\"The response has text about invalid type\", () => {",
											"pm.expect(reponseText).include(\"invalid type: string\")",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{id}}\",\n    \"title\": \"{{title}}\",\n    \"content\": \"{{content}}\",\n    \"time\": \"{{time}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/activities/{{id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update_activity_add_not_exist_field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let title = pm.collectionVariables.get(\"title\");",
											"let content = pm.collectionVariables.get(\"content\");",
											"let time = pm.collectionVariables.get(\"time\");",
											"",
											"title = Util.getRandomString(Util.getRandomInt(60))",
											"content = Util.getRandomString(Util.getRandomInt(Math.pow(2, 12)))",
											"const timeRange = 12 * 60;",
											"time = Util.getRandomInt(timeRange);",
											"",
											"pm.collectionVariables.set(\"title\", title);",
											"pm.collectionVariables.set(\"content\", content);",
											"pm.collectionVariables.set(\"time\", time);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.expect(pm.response.code).to.eql(200);",
											"})",
											"const reponseText = pm.response.text();",
											"",
											"pm.test(\"The response has Activity Id\", () => {",
											"    pm.expect(reponseText.includes(`Activity { id: ActivityId(\"${pm.collectionVariables.get('id')}\")`)).to.be.true",
											"})",
											"",
											"pm.test(\"The response has title\", () => {",
											"    pm.expect(reponseText.includes(pm.collectionVariables.get(\"title\"))).to.be.true",
											"})",
											"",
											"pm.test(\"The response has content\", () => {",
											"    pm.expect(reponseText.includes(pm.collectionVariables.get(\"content\"))).to.be.true",
											"})",
											"",
											"pm.test(\"The response has time\", () => {",
											"    pm.expect(reponseText.includes(pm.collectionVariables.get(\"time\"))).to.be.true",
											"})",
											"",
											"pm.test(\"The response has not new field\", () => {",
											"    pm.expect(reponseText).not.include(\"newField\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{id}}\",\n    \"title\": \"{{title}}\",\n    \"content\": \"{{content}}\",\n    \"time\": {{time}},\n    \"newField\": \"hello\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/activities/{{id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"const url = pm.collectionVariables.get(\"url\")",
									"const id = parseInt(pm.collectionVariables.get(\"id\")) + 1",
									"const reqBody = {",
									"    \"id\": `${id}`,",
									"    \"title\": `${Util.getRandomString(60)}`,",
									"    \"content\": `${Util.getRandomString(1024)}`,",
									"    \"time\": Util.getRandomInt(12 * 60)",
									"}",
									"",
									"const postRequest = {",
									"  url: `${url}/activities`,",
									"  method: 'POST',",
									"  header: {",
									"    'Content-Type': 'application/json',",
									"  },",
									"  body: {",
									"    mode: 'json',",
									"    raw: JSON.stringify(reqBody)",
									"  }",
									"};",
									"",
									"pm.sendRequest(postRequest, (error, response) => {",
									"  pm.test('response should be okay to process', () => {",
									"    pm.expect(error).to.equal(null);",
									"    pm.expect(response).to.have.property('code', 200);",
									"  })",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"const url = pm.collectionVariables.get(\"url\")",
									"const id = parseInt(pm.collectionVariables.get(\"id\")) + 1",
									"",
									"",
									"const postRequest = {",
									"  url: `${url}/activities/${id}`,",
									"  method: 'DELETE',",
									"  header: {",
									"    'Content-Type': 'application/json',",
									"  },",
									"",
									"};",
									"pm.sendRequest(postRequest, (error, response) => {",
									"  pm.test('response should be okay to process', () => {",
									"    pm.expect(error).to.equal(null);",
									"    pm.expect(response).to.have.property('code', 200);",
									"  })",
									"});",
									"",
									""
								]
							}
						}
					]
				},
				{
					"name": "Delete",
					"item": [
						{
							"name": "delete_not_exist_activity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", () => {",
											"    pm.expect(pm.response.code).to.eql(404);",
											"})",
											"",
											"pm.test(\"Text should contain true information\", () => {",
											"    pm.expect(pm.response.text()).include(\"Activities not Found\")",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const id = pm.collectionVariables.get(\"id\")",
											"pm.collectionVariables.set(\"id\", parseInt(id) + 100)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/activities/{{id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Write_off",
					"item": [
						{
							"name": "add_time_spent_with_0",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", () => {",
											"    pm.expect(pm.response.code).to.eql(422);",
											"})",
											"",
											"const timeSpentId = Util.getIntFromText(pm.response.text());",
											"",
											"pm.collectionVariables.set(\"timeSpentID\", timeSpentId)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"time\": 0,\n    \"activity_id\": \"{{id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/time_spent",
									"host": [
										"{{url}}"
									],
									"path": [
										"time_spent"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"const url = pm.collectionVariables.get(\"url\")",
									"const id = parseInt(pm.collectionVariables.get(\"id\")) + 1",
									"const reqBody = {",
									"    \"id\": `${id}`,",
									"    \"title\": `${Util.getRandomString(60)}`,",
									"    \"content\": `${Util.getRandomString(1024)}`,",
									"    \"time\": Util.getRandomInt(12 * 60)",
									"}",
									"",
									"const postRequest = {",
									"  url: `${url}/activities`,",
									"  method: 'POST',",
									"  header: {",
									"    'Content-Type': 'application/json',",
									"  },",
									"  body: {",
									"    mode: 'json',",
									"    raw: JSON.stringify(reqBody)",
									"  }",
									"};",
									"",
									"pm.sendRequest(postRequest, (error, response) => {",
									"  pm.test('response should be okay to process', () => {",
									"    pm.expect(error).to.equal(null);",
									"    pm.expect(response).to.have.property('code', 200);",
									"  })",
									"});",
									"",
									"pm.collectionVariables.set(\"id\", id)"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"const url = pm.collectionVariables.get(\"url\")",
									"const id = parseInt(pm.collectionVariables.get(\"id\"))",
									"",
									"",
									"const postRequest = {",
									"  url: `${url}/activities/${id}`,",
									"  method: 'DELETE',",
									"  header: {",
									"    'Content-Type': 'application/json',",
									"  },",
									"",
									"};",
									"pm.sendRequest(postRequest, (error, response) => {",
									"  pm.test('response should be okay to process', () => {",
									"    pm.expect(error).to.equal(null);",
									"    pm.expect(response).to.have.property('code', 200);",
									"  })",
									"});",
									"",
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"Util = {}",
							"",
							"Util.getRandomString = (lenght) => {",
							"    let chars = \"abcdeghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ012345689!@#$%^&*()';\";",
							"    let charsLength = chars.length;",
							"    let result = '';",
							"    for (let i = 0; i < lenght; i++) {",
							"        result += chars.charAt(Math.floor(Math.random() * charsLength));",
							"    }",
							"    return result;",
							"}",
							"",
							"Util.getRandomInt = (max) => Math.floor(Math.random()* max)",
							"",
							"Util.getIntFromText = (string) => {",
							"    const regex = /\\d+/;",
							"    const match = string.match(regex);",
							"    return match[0]",
							"}",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "HW 3 Update Cases (Positive)",
			"item": [
				{
					"name": "01_Setup_CreateActivity",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status 200 (created)', ()=> pm.expect(pm.response.code).to.eql(200));",
									"pm.test('Body mentions ActivityId', ()=> pm.expect(pm.response.text()).to.include(`ActivityId(\"${pm.collectionVariables.get('id')}\")`));"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const id = (pm.collectionVariables.get('id') ? (parseInt(pm.collectionVariables.get('id'))+1) : 1).toString();",
									"pm.collectionVariables.set('id', id);",
									"pm.collectionVariables.set('title', 't_' + Util.getRandomString(8));",
									"pm.collectionVariables.set('content', 'c_' + Util.getRandomString(16));",
									"pm.collectionVariables.set('time', Util.getRandomInt(60));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{id}}\",\n  \"title\": \"{{title}}\",\n  \"content\": \"{{content}}\",\n  \"time\": {{time}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/activities",
							"host": [
								"{{url}}"
							],
							"path": [
								"activities"
							]
						}
					},
					"response": []
				},
				{
					"name": "02_Update_ChangeFields",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status 200 (updated)', ()=> pm.expect(pm.response.code).to.eql(200));",
									"pm.test('Updated text contains fields', ()=> {",
									"  const t = pm.response.text();",
									"  pm.expect(t).to.include(pm.collectionVariables.get('title'));",
									"  pm.expect(t).to.include(pm.collectionVariables.get('content'));",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.collectionVariables.set('title', 't_upd_' + Util.getRandomString(8));",
									"pm.collectionVariables.set('content', 'c_upd_' + Util.getRandomString(20));",
									"pm.collectionVariables.set('time', Util.getRandomInt(60));"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{id}}\",\n  \"title\": \"{{title}}\",\n  \"content\": \"{{content}}\",\n  \"time\": {{time}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/activities/{{id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"activities",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "03_Verify_AfterUpdate",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status 200', ()=> pm.expect(pm.response.code).to.eql(200));",
									"const j = pm.response.json()[0];",
									"pm.test('Keys==4', ()=> pm.expect(Object.keys(j).length).to.eql(4));",
									"pm.test('Fields match updated', ()=> {",
									"  pm.expect(j.id).to.eql(pm.collectionVariables.get('id').toString());",
									"  pm.expect(j.title).to.eql(pm.collectionVariables.get('title'));",
									"  pm.expect(j.content).to.eql(pm.collectionVariables.get('content'));",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const startPagination = parseInt(pm.collectionVariables.get('id')) - 1;",
									"pm.collectionVariables.set('startPagination', startPagination);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/activities?start={{startPagination}}&end={{id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"activities"
							],
							"query": [
								{
									"key": "start",
									"value": "{{startPagination}}"
								},
								{
									"key": "end",
									"value": "{{id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "04_Spend_Time_AfterUpdate",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status 200 (time spent created)', ()=> pm.expect(pm.response.code).to.eql(200));",
									"const tsId = Util.getIntFromText(pm.response.text());",
									"pm.collectionVariables.set('timeSpentID', tsId);"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const spend = Math.max(1, Util.rand(1, Math.max(1, parseInt(pm.collectionVariables.get('time')))));",
									"pm.collectionVariables.set('timeSpent', spend);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"time\": {{timeSpent}},\n  \"activity_id\": \"{{id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/time_spent",
							"host": [
								"{{url}}"
							],
							"path": [
								"time_spent"
							]
						}
					},
					"response": []
				},
				{
					"name": "05_Verify_TimeSpent",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status 200', ()=> pm.expect(pm.response.code).to.eql(200));",
									"const t = pm.response.text();",
									"pm.test('Contains TimeSpentId', ()=> pm.expect(t).to.include(`TimeSpentId(\"${pm.collectionVariables.get('timeSpentID')}\")`));",
									"pm.test('Contains ActivityId', ()=> pm.expect(t).to.include(`ActivityId(\"${pm.collectionVariables.get('id')}\")`));",
									"pm.test('Contains time spent value', ()=> pm.expect(t).to.include(pm.collectionVariables.get('timeSpent')));"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/time_spent/{{timeSpentID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"time_spent",
								"{{timeSpentID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "06_Teardown_DeleteActivity",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status 200 (deleted)', ()=> pm.expect(pm.response.code).to.eql(200));",
									"pm.test('Text mentions deleted', ()=> pm.expect(pm.response.text()).to.include('Activity deleted'));"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/activities/{{id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"activities",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "07_Verify_Delete_404",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Second delete -> 404', ()=> pm.expect(pm.response.code).to.eql(404));"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/activities/{{id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"activities",
								"{{id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"Util = {}",
							"Util.getRandomString = (length) => {",
							"    const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";",
							"    let out = '';",
							"    for (let i=0;i<length;i++){ out += chars[Math.floor(Math.random()*chars.length)]; }",
							"    return out;",
							"}",
							"Util.getRandomInt = (max) => Math.floor(Math.random()*(max+1))",
							"Util.rand = (min,max) => Math.floor(Math.random()*(max-min+1))+min",
							"Util.getIntFromText = (string) => {",
							"    const regex = /\\d+/;",
							"    const match = string.match(regex);",
							"    return match ? match[0] : '';",
							"}",
							""
						]
					}
				}
			]
		},
		{
			"name": "HW2 Additional Negative Cases",
			"item": [
				{
					"name": "Add",
					"item": [
						{
							"name": "[EXPECTED-FAIL] add_negative_time",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('422 Unprocessable', ()=> pm.expect(pm.response.code).to.eql(422));"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const id = (pm.collectionVariables.get('id') ? (parseInt(pm.collectionVariables.get('id'))+1) : 1).toString();",
											"pm.collectionVariables.set('id', id);",
											"pm.collectionVariables.set('title', 'neg_t_' + Util.getRandomString(6));",
											"pm.collectionVariables.set('content', 'neg_c_' + Util.getRandomString(10));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"{{id}}\",\n  \"title\": \"{{title}}\",\n  \"content\": \"{{content}}\",\n  \"time\": -1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/activities",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities"
									]
								}
							},
							"response": []
						},
						{
							"name": "[EXPECTED-FAIL]add_float_time",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('422 Unprocessable', ()=> pm.expect(pm.response.code).to.eql(422));"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const id = (pm.collectionVariables.get('id') ? (parseInt(pm.collectionVariables.get('id'))+1) : 1).toString();",
											"pm.collectionVariables.set('id', id);",
											"pm.collectionVariables.set('title', 'negf_t_' + Util.getRandomString(6));",
											"pm.collectionVariables.set('content', 'negf_c_' + Util.getRandomString(10));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"{{id}}\",\n  \"title\": \"{{title}}\",\n  \"content\": \"{{content}}\",\n  \"time\": 1.5\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/activities",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities"
									]
								}
							},
							"response": []
						},
						{
							"name": "[EXPECTED-FAIL] add_duplicate_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('409/422 for duplicate', ()=> pm.expect([409,422]).to.include(pm.response.code));"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const id = (pm.collectionVariables.get('id') ? (parseInt(pm.collectionVariables.get('id'))+1) : 1).toString();",
											"pm.collectionVariables.set('id', id);",
											"pm.collectionVariables.set('title', 'dup_t_' + Util.getRandomString(6));",
											"pm.collectionVariables.set('content', 'dup_c_' + Util.getRandomString(10));",
											"pm.collectionVariables.set('time', Util.getRandomInt(60));",
											"const url = pm.collectionVariables.get('url');",
											"const body = { id: id, title: pm.collectionVariables.get('title'), content: pm.collectionVariables.get('content'), time: parseInt(pm.collectionVariables.get('time')) };",
											"pm.sendRequest({ url: `${url}/activities`, method: 'POST', header: {'Content-Type':'application/json'}, body:{ mode:'json', raw: JSON.stringify(body)} }, (err,res)=>{});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"{{id}}\",\n  \"title\": \"{{title}}\",\n  \"content\": \"{{content}}\",\n  \"time\": {{time}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/activities",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edit",
					"item": [
						{
							"name": "update_nonexistent_should_404",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('404 Not Found', ()=> pm.expect(pm.response.code).to.eql(404));"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"999999\",\n  \"title\": \"upd_noexist\",\n  \"content\": \"upd_noexist\",\n  \"time\": 10\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/activities/999999",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities",
										"999999"
									]
								}
							},
							"response": []
						},
						{
							"name": "[EXPECTED-FAIL] update_id_mismatch",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('409/422 expected for id mismatch', ()=> pm.expect([409,422]).to.include(pm.response.code));"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"1002\",\n  \"title\": \"mismatch\",\n  \"content\": \"mismatch\",\n  \"time\": 5\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/activities/1001",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities",
										"1001"
									]
								}
							},
							"response": []
						},
						{
							"name": "[EXPECTED-FAIL]update_deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('404 after delete', ()=> pm.expect(pm.response.code).to.eql(404));"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const url = pm.collectionVariables.get('url');",
											"const id = (pm.collectionVariables.get('id') ? (parseInt(pm.collectionVariables.get('id'))+1) : 1).toString();",
											"pm.collectionVariables.set('id', id);",
											"const body = { id: id, title:'tmp', content:'tmp', time:10 };",
											"pm.sendRequest({ url: `${url}/activities`, method: 'POST', header:{'Content-Type':'application/json'}, body:{ mode:'json', raw: JSON.stringify(body)}}, (e,r)=>{",
											"  pm.sendRequest({ url: `${url}/activities/${id}`, method: 'DELETE'}, ()=>{});",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"{{id}}\",\n  \"title\": \"after_delete\",\n  \"content\": \"after_delete\",\n  \"time\": 7\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/activities/{{id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete",
					"item": [
						{
							"name": "[EXPECTED-FAIL]delete_same",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Second delete -> 404', ()=> pm.expect(pm.response.code).to.eql(404));"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const url = pm.collectionVariables.get('url');",
											"const id = (pm.collectionVariables.get('id') ? (parseInt(pm.collectionVariables.get('id'))+1) : 1).toString();",
											"pm.collectionVariables.set('id', id);",
											"const body = { id: id, title:'to_delete', content:'to_delete', time:5 };",
											"pm.sendRequest({ url: `${url}/activities`, method: 'POST', header:{'Content-Type':'application/json'}, body:{ mode:'json', raw: JSON.stringify(body)}}, (e,r)=>{",
											"  pm.sendRequest({ url: `${url}/activities/${id}`, method: 'DELETE'}, ()=>{});",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/activities/{{id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Write_off",
					"item": [
						{
							"name": "[EXPECTED-FAIL] writeoff_negative_time",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('422 Unprocessable', ()=> pm.expect(pm.response.code).to.eql(422));"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const url = pm.collectionVariables.get('url');",
											"const id = (pm.collectionVariables.get('id') ? (parseInt(pm.collectionVariables.get('id'))+1) : 1).toString();",
											"pm.collectionVariables.set('id', id);",
											"const body = { id: id, title:'sp_neg', content:'sp_neg', time:5 };",
											"pm.sendRequest({ url: `${url}/activities`, method: 'POST', header:{'Content-Type':'application/json'}, body:{ mode:'json', raw: JSON.stringify(body)}}, ()=>{});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"time\": -5,\n  \"activity_id\": \"{{id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/time_spent",
									"host": [
										"{{url}}"
									],
									"path": [
										"time_spent"
									]
								}
							},
							"response": []
						},
						{
							"name": "[EXPECTED-FAIL]writeoff_float_time",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('422 Unprocessable', ()=> pm.expect(pm.response.code).to.eql(422));"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const url = pm.collectionVariables.get('url');",
											"const id = (pm.collectionVariables.get('id') ? (parseInt(pm.collectionVariables.get('id'))+1) : 1).toString();",
											"pm.collectionVariables.set('id', id);",
											"const body = { id: id, title:'sp_neg', content:'sp_neg', time:5 };",
											"pm.sendRequest({ url: `${url}/activities`, method: 'POST', header:{'Content-Type':'application/json'}, body:{ mode:'json', raw: JSON.stringify(body)}}, ()=>{});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"time\": 0.5,\n  \"activity_id\": \"{{id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/time_spent",
									"host": [
										"{{url}}"
									],
									"path": [
										"time_spent"
									]
								}
							},
							"response": []
						},
						{
							"name": "[EXPECTED-FAIL]writeoff_more_than_left",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('422 Unprocessable', ()=> pm.expect(pm.response.code).to.eql(422));"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const url = pm.collectionVariables.get('url');",
											"const id = (pm.collectionVariables.get('id') ? (parseInt(pm.collectionVariables.get('id'))+1) : 1).toString();",
											"pm.collectionVariables.set('id', id);",
											"const time = 5;",
											"pm.collectionVariables.set('time', time);",
											"const body = { id: id, title:'sp_over', content:'sp_over', time: time };",
											"pm.sendRequest({ url: `${url}/activities`, method: 'POST', header:{'Content-Type':'application/json'}, body:{ mode:'json', raw: JSON.stringify(body)}}, ()=>{});",
											"pm.collectionVariables.set('timeSpent', time + 10);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"time\": {{timeSpent}},\n  \"activity_id\": \"{{id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/time_spent",
									"host": [
										"{{url}}"
									],
									"path": [
										"time_spent"
									]
								}
							},
							"response": []
						},
						{
							"name": "EXPECTED-FAIL get_timespent_not_exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('404 Not Found', ()=> pm.expect(pm.response.code).to.eql(404));"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/time_spent/999999",
									"host": [
										"{{url}}"
									],
									"path": [
										"time_spent",
										"999999"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"Util = {}",
							"Util.getRandomString = (length) => {",
							"    const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";",
							"    let out = '';",
							"    for (let i=0;i<length;i++){ out += chars[Math.floor(Math.random()*chars.length)]; }",
							"    return out;",
							"}",
							"Util.getRandomInt = (max) => Math.floor(Math.random()*(max+1))",
							"Util.rand = (min,max) => Math.floor(Math.random()*(max-min+1))+min",
							"Util.getIntFromText = (string) => {",
							"    const regex = /\\d+/;",
							"    const match = string.match(regex);",
							"    return match ? match[0] : '';",
							"}",
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "",
			"type": "string"
		},
		{
			"key": "title",
			"value": "",
			"type": "string"
		},
		{
			"key": "content",
			"value": "",
			"type": "string"
		},
		{
			"key": "time",
			"value": "",
			"type": "string"
		},
		{
			"key": "startPagination",
			"value": "",
			"type": "string"
		},
		{
			"key": "url",
			"value": "http://backend:8080",
			"type": "string"
		},
		{
			"key": "timeSpentID",
			"value": "",
			"type": "string"
		},
		{
			"key": "timeSpent",
			"value": "",
			"type": "string"
		},
		{
			"key": "titleLength",
			"value": "60",
			"type": "string"
		}
	]
}