{
	"info": {
		"_postman_id": "c9957ce5-5a58-4099-9d92-ba0d4069c99f",
		"name": "HW1 Exploratory testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12219227"
	},
	"item": [
		{
			"name": "HW1 Exploratory testing",
			"item": [
				{
					"name": "01 Boundaries",
					"item": [
						{
							"name": "POST_time_0",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const nextId = (pm.collectionVariables.get('id') ? (parseInt(pm.collectionVariables.get('id'))+1) : 1).toString();",
											"pm.collectionVariables.set('id', nextId);",
											"pm.collectionVariables.set('title', 'b_' + Util.getRandomString(6));",
											"pm.collectionVariables.set('content', 'b_' + Util.getRandomString(12));"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Created or Rejected (200/422)', ()=> pm.expect([200,422]).to.include(pm.response.code));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\":\"{{id}}\", \"title\":\"{{title}}\", \"content\":\"{{content}}\", \"time\": 0\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/activities",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST_time_1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const nextId = (pm.collectionVariables.get('id') ? (parseInt(pm.collectionVariables.get('id'))+1) : 1).toString();",
											"pm.collectionVariables.set('id', nextId);",
											"pm.collectionVariables.set('title', 'b_' + Util.getRandomString(6));",
											"pm.collectionVariables.set('content', 'b_' + Util.getRandomString(12));"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Expect 200 for minimal positive', ()=> pm.expect(pm.response.code).to.eql(200));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\":\"{{id}}\", \"title\":\"{{title}}\", \"content\":\"{{content}}\", \"time\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/activities",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST_time_60",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const nextId = (pm.collectionVariables.get('id') ? (parseInt(pm.collectionVariables.get('id'))+1) : 1).toString();",
											"pm.collectionVariables.set('id', nextId);",
											"pm.collectionVariables.set('title', 'b_' + Util.getRandomString(6));",
											"pm.collectionVariables.set('content', 'b_' + Util.getRandomString(12));"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Expect 200 at presumed upper bound', ()=> pm.expect(pm.response.code).to.eql(200));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\":\"{{id}}\", \"title\":\"{{title}}\", \"content\":\"{{content}}\", \"time\": 60\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/activities",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST_time_61",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const nextId = (pm.collectionVariables.get('id') ? (parseInt(pm.collectionVariables.get('id'))+1) : 1).toString();",
											"pm.collectionVariables.set('id', nextId);",
											"pm.collectionVariables.set('title', 'b_' + Util.getRandomString(6));",
											"pm.collectionVariables.set('content', 'b_' + Util.getRandomString(12));"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Should be rejected (422) or capped', ()=> pm.expect([200,422]).to.include(pm.response.code));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\":\"{{id}}\", \"title\":\"{{title}}\", \"content\":\"{{content}}\", \"time\": 61\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/activities",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST_title_empty",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const nextId = (pm.collectionVariables.get('id') ? (parseInt(pm.collectionVariables.get('id'))+1) : 1).toString();",
											"pm.collectionVariables.set('id', nextId);",
											"pm.collectionVariables.set('title', 'b_' + Util.getRandomString(6));",
											"pm.collectionVariables.set('content', 'b_' + Util.getRandomString(12));"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Empty title -> 422 or 200 (decide spec)', ()=> pm.expect([200,422]).to.include(pm.response.code));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\":\"{{id}}\", \"title\":\"\", \"content\":\"{{content}}\", \"time\": 5\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/activities",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST_title_256",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const nextId = (pm.collectionVariables.get('id') ? (parseInt(pm.collectionVariables.get('id'))+1) : 1).toString();",
											"pm.collectionVariables.set('id', nextId);",
											"pm.collectionVariables.set('title', 'b_' + Util.getRandomString(6));",
											"pm.collectionVariables.set('content', 'b_' + Util.getRandomString(12));",
											"pm.collectionVariables.set('longTitle', Util.makeOfLen('a',256));"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Long title (256) accepted or limited', ()=> pm.expect([200,422]).to.include(pm.response.code));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\":\"{{id}}\", \"title\":\"{{longTitle}}\", \"content\":\"{{content}}\", \"time\": 5\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/activities",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST_title_unicode",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const nextId = (pm.collectionVariables.get('id') ? (parseInt(pm.collectionVariables.get('id'))+1) : 1).toString();",
											"pm.collectionVariables.set('id', nextId);",
											"pm.collectionVariables.set('title', 'b_' + Util.getRandomString(6));",
											"pm.collectionVariables.set('content', 'b_' + Util.getRandomString(12));"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Unicode accepted', ()=> pm.expect([200,422]).to.include(pm.response.code));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\":\"{{id}}\", \"title\":\"Привет 😀 中文\", \"content\":\"{{content}}\", \"time\": 5\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/activities",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "02 Pagination",
					"item": [
						{
							"name": "GET_window_1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.collectionVariables.set('start','0');",
											"pm.collectionVariables.set('end','1');"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('200', ()=> pm.expect(pm.response.code).to.eql(200));",
											"if (pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
											"  const j = pm.response.json();",
											"  pm.test('Array len ≤ 1', ()=> pm.expect(j.length).to.be.below(2));",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/activities?start={{start}}&end={{end}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities"
									],
									"query": [
										{
											"key": "start",
											"value": "{{start}}"
										},
										{
											"key": "end",
											"value": "{{end}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_start_negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Start<0 -> 422/400 or adjusted', ()=> pm.expect([200,400,422]).to.include(pm.response.code));"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/activities?start=-1&end=1",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities"
									],
									"query": [
										{
											"key": "start",
											"value": "-1"
										},
										{
											"key": "end",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_end_less_than_start",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('end<start -> 422/400', ()=> pm.expect([400,422]).to.include(pm.response.code));"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/activities?start=5&end=1",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities"
									],
									"query": [
										{
											"key": "start",
											"value": "5"
										},
										{
											"key": "end",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_large_window",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Large window 200', ()=> pm.expect(pm.response.code).to.eql(200));"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/activities?start=0&end=1000",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities"
									],
									"query": [
										{
											"key": "start",
											"value": "0"
										},
										{
											"key": "end",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "03 Types Formats",
					"item": [
						{
							"name": "POST_time_string",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const nextId = (pm.collectionVariables.get('id') ? (parseInt(pm.collectionVariables.get('id'))+1) : 1).toString();",
											"pm.collectionVariables.set('id', nextId);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('422 for string time (или 200 если парсит)', ()=> pm.expect([200,422]).to.include(pm.response.code));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\":\"{{id}}\", \"title\":\"t\", \"content\":\"c\", \"time\": \"5\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/activities",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST_time_float",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const nextId = (pm.collectionVariables.get('id') ? (parseInt(pm.collectionVariables.get('id'))+1) : 1).toString();",
											"pm.collectionVariables.set('id', nextId);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('422 for float time (или 200 если парсит)', ()=> pm.expect([200,422]).to.include(pm.response.code));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\":\"{{id}}\", \"title\":\"t\", \"content\":\"c\", \"time\": 5.5\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/activities",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST_id_string_alpha",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('id alpha -> 422 (или 200 если приводится)', ()=> pm.expect([200,422]).to.include(pm.response.code));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\":\"abc\", \"title\":\"t\", \"content\":\"c\", \"time\": 5\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/activities",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST_plain_text_body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const nextId = (pm.collectionVariables.get('id') ? (parseInt(pm.collectionVariables.get('id'))+1) : 1).toString();",
											"pm.collectionVariables.set('id', nextId);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('non-JSON body -> 422/400/415', ()=> pm.expect([400,415,422]).to.include(pm.response.code));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "id={{id}}&title=txt&content=raw&time=5",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{url}}/activities",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "04 Duplicates",
					"item": [
						{
							"name": "POST_duplicate_id_again",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const id = (pm.collectionVariables.get('id') ? (parseInt(pm.collectionVariables.get('id'))+1) : 1).toString();",
											"pm.collectionVariables.set('id', id);",
											"const url = pm.collectionVariables.get('url');",
											"const body = { id: id, title:'dup', content:'dup', time:5 };",
											"pm.sendRequest({ url: `${url}/activities`, method:'POST', header:{'Content-Type':'application/json'}, body:{ mode:'raw', raw: JSON.stringify(body)} }, ()=>{});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('duplicate -> 409/422 expected', ()=> pm.expect([409,422]).to.include(pm.response.code));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\":\"{{id}}\", \"title\":\"dup\", \"content\":\"dup\", \"time\": 5\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/activities",
									"host": [
										"{{url}}"
									],
									"path": [
										"activities"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"const id = (pm.collectionVariables.get('id') ? (parseInt(pm.collectionVariables.get('id'))+1) : 1).toString();\r",
									"pm.collectionVariables.set('id', id);\r",
									"const url = pm.collectionVariables.get('url');\r",
									"const body = { id: id, title:'dup', content:'dup', time:5 };\r",
									"pm.sendRequest({ url: `${url}/activities`, method:'POST', header:{'Content-Type':'application/json'}, body:{ mode:'raw', raw: JSON.stringify(body)} }, ()=>{});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "# Exploratory tour (CRUD + Write-off)\n\n**Цель:** проверить все основные методы API (CRUD + списание времени), првоерить риски валидации, пагинации и согласованности данных/логов.\n\n**Ожидаемые проблемы:**  \nдубликаты и перезапись при повторном POST с тем же id;  \nневерные коды (напр., 416 вместо 404), \"сырой текст\" вместо JSON;  \nнекорректная валидация time (отрицательные/float/строки/overspend);  \nнесоответствие id в path/body, опции пагинации start/end (off-by-one, end);  \nслабая наблюдаемость: дублирующиеся/шумные логи, отсутствие ключевых полей в логах.\n\n**Чек-лист туров:**  \nCRUD tour (создать/посмотреть/обновить/удалить)  \nZero–One–Many: time в {0,1,максимум,больше максимума}; пустые/длинные строки  \nBoundary: {-1,0,1, max-1, max, max+1}  \nGarbage: неверные типы (string/float/null), пустое тело, text вместо JSON  \nPagination: start<0, end, большие окна, 1 запись  \nError Guessing: несоответствие id в path/body, удалённые/несуществующие сущности  \nObservability: полезность логов (уровень, отсутствие полей)\n\n**Наборы тестовых данных:**  \nid: новый; существующий; удалённый; большое значение (9990999)  \ntime : \\[-1, 0, 1, 59, 60, 61, 999999\\] title/content: \"\", \" \", ASCII(1), ASCII(255/256/2048), Unicode, пробелы/табы/nb-space  \nПагинация: (start,end) > (0,1), (-1,1), (5,1), (0,1000)\n\n# HW 1 Exploratory testing (отчёт)\n\n**Время:** 2025-08-20, 14:00–15:00  \n**Среда:** Docker (image upbeat_ellis), [http://localhost:8080](http://localhost:8080)\n\n---\n\n**Краткое описание**  \nПройдены базовые позитивные кейсы, границы time (0/1/60/61), текстовые поля (пусто/256/Unicode), пагинация  \nНайдены критичные проблемы стабильности: 500 + panic на GET /activities при неверных параметрах; некорректная обработка ошибок пагинации.  \nВалидация типов реализована только частично (float в time даёт 400), поведение по границам/кодам не согласовано с ожиданиями.  \nЛоги информативны, но есть мешающие записи (405 MethodNotAllowed перед успешными 200) и мешанина в уровнях.\n\n**Покрытие**\n\nBoundaries: POST /activities с time {0,1,60,61} — все вернули 200\n\nНайденные проблемы (по приоритетам)  \nGET /activities приводит к 500 при неверных параметрах.  \nВ логах: `unable to process request (internal error) status=500 ... ParseError(ParseIntError { kind: InvalidDigit }), затем panic в src/routes/activities.rs:20:27 (slice index starts at 5 but ends at 1).`  \nПохоже, некорректная работа с пагинацией (парсинг без проверок) приводит к аварийному завершению  \nstart<0 возвращает 416 Range Not Satisfiable вместо ожидаемых 400/422 или нормализации.\n\nГраницы time фактически не ограничены: time=0 и даже time=-1 проходят под 200.\n\nНестабильные/смешанные ошибки на POST /activities в логах: подряд идут 405 MethodNotAllowed, 404 NotFound, затем 200.\n\nШумные логи: множественные processing request/finished processing и MethodNotAllowed на один фактический вызов создают спам на INFO/WARN. Сложно выявить причину проблемы.\n\nРазный формат ошибок: в логах детальный warp-стек с внутренними типами (Rejection(...), BodyDeserializeError …), но судя по всему, приходит просто код без JSON-тела.\n\n**Подробности по ключевым кейсам**\n\nBoundaries (time)  \n`POST_time_0/1/60/61 — все 200.` Если 0 и > 60 не должны приниматься, нужны правила валидации и корректные коды (422 Unprocessable Entity лучше, если тело запроса синтаксически верное).  \nПагинация  \n`GET … start=0&end=1 — ОК (200, массив ≤1). GET … start=-1&end=1 — 416`, что является ошибкой диапазона для Range заголовков, а не для query параметров. ОР - 400 (некорректный ввод)  \nТипы  \n`Float в time → 400 (из логов invalid type: floating point 5.5)`\n\n**Предложения по улучшению**\n\n1. Защита от 500  \n    Перед парсингом start/end проверять, что это целые неотрицательные числа; для end < start — возвращать 400/422  \n    Любые операции со слайсами — только после проверок на границы\n    \n2. Единая валидация и коды  \n    Определить и задокументировать допустимый диапазон time  \n    Для невалидных JSON/типов — 400 + JSON-ошибка.\n    \n3. Унификация поведения пагинации  \n    Приведём start<0 к 0 или возвращаем 400/422?  \n    Строгое правило для endДобавить в логи ключевые поля (start, end, фактическая длина выборки).\n    \n4. Логи  \n    Понизить количество записей processing или сгруппировать их.  \n    405 от промежуточных фильтров — не логировать как WARN или лучше их скрыть  \n    Для ERROR/WARN добавлять краткую часть входных данных\n    \n\nХотелось бы единый JSON-формат для ошибок",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"Util = Util || {};",
							"Util.getRandomString = (length=8) => {",
							"  const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';",
							"  let out='';",
							"  for (let i=0;i<length;i++){ out += chars[Math.floor(Math.random()*chars.length)]; }",
							"  return out;",
							"};",
							"Util.makeOfLen = (ch='a', n=1) => new Array(n+1).join(ch);",
							"Util.rand = (min, max) => Math.floor(Math.random()*(max-min+1))+min;",
							"Util.pick = (arr) => arr[Math.floor(Math.random()*arr.length)];",
							"Util.setKV = (k,v) => pm.collectionVariables.set(k, v);"
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"Util = {}\r",
					"\r",
					"Util.getRandomString = (lenght) => {\r",
					"    let chars = \"abcdeghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ012345689!@#$%^&*()';\";\r",
					"    let result = '';\r",
					"    for (let i = 0; i < lenght; i++) {\r",
					"        result += chars.charAt(Util.getRandomInt(chars.length));\r",
					"    }\r",
					"    return result;\r",
					"}\r",
					"\r",
					"Util.getRandomInt = (max) => Math.floor(Math.random()* max)\r",
					"\r",
					"Util.getIntFromText = (string) => {\r",
					"    const regex = /\\d+/;\r",
					"    const match = string.match(regex);\r",
					"    return match[0]\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "http://localhost:8080"
		},
		{
			"key": "start",
			"value": ""
		},
		{
			"key": "end",
			"value": ""
		},
		{
			"key": "id",
			"value": ""
		},
		{
			"key": "title",
			"value": ""
		},
		{
			"key": "content",
			"value": ""
		},
		{
			"key": "longTitle",
			"value": ""
		}
	]
}